{"version":3,"sources":["components/Roulette.tsx","pages/Ordering.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["backgroundColors","textColors","Roulette","useState","mustSpin","setMustSpin","prizeNumber","setPrizeNumber","personList","setPersonList","userName","setUserName","roulettoData","setRoulettoData","isRoulettoDisplayed","setRoulettoDisplay","handlePersonAddEvent","handleSpinClick","map","option","newPrizeNumber","Math","floor","random","length","Demo","styled","backgroundColor","theme","palette","background","paper","Fragment","Typography","sx","mt","mb","variant","component","Box","width","Grid","container","spacing","item","xs","lg","FormControl","fullWidth","TextField","id","label","value","onChange","event","target","onKeyDown","e","key","keyCode","IconButton","color","aria-label","size","edge","onClick","justifyContent","List","ListItem","divider","secondaryAction","newPersonList","filter","handleDeletePerson","ListItemText","primary","mustStartSpinning","data","fontSize","outerBorderColor","outerBorderWidth","innerRadius","innerBorderColor","innerBorderWidth","radiusLineColor","radiusLineWidth","textDistance","onStopSpinning","Button","createTheme","OrderingPage","ThemeProvider","CssBaseline","AppBar","position","elevation","borderBottom","t","Toolbar","noWrap","Container","maxWidth","Paper","my","md","p","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a52e1bd2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Wheel } from \"react-custom-roulette\";\nimport { styled } from \"@mui/material/styles\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\nimport TextField from \"@mui/material/TextField\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport { FormControl } from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\n\nconst backgroundColors = [\"#ff8f43\", \"#70bbe0\", \"#0b3351\", \"#A1341B\"];\n// const backgroundColors = [\"#ff8f43\", \"#70bbe0\", \"#0b3351\", \"#f9dd50\"];\n// const backgroundColors = [\"#000000\", \"#FF3232\"];\n// const backgroundColors = [\n//   \"#A1341B\",\n//   \"#B3ED58\",\n//   \"#ED6040\",\n//   \"#2860ED\",\n//   \"#2347A1\",\n// ];\nconst textColors = [\"#FFFFFF\"];\n// const textColors = [\"#0b3351\"];\nconst outerBorderColor = \"#eeeeee\";\nconst outerBorderWidth = 10;\nconst innerBorderColor = \"#30261a\";\nconst innerBorderWidth = 0;\nconst innerRadius = 0;\nconst radiusLineColor = \"#eeeeee\";\nconst radiusLineWidth = 8;\nconst fontSize = 19;\nconst textDistance = 60;\n\nexport default function Roulette() {\n  const [mustSpin, setMustSpin] = useState(false);\n  const [prizeNumber, setPrizeNumber] = useState(0);\n  const [personList, setPersonList] = useState<string[]>([]);\n  const [userName, setUserName] = useState(\"\");\n  const [roulettoData, setRoulettoData] = useState<any[]>([]);\n  const [isRoulettoDisplayed, setRoulettoDisplay] = useState(false);\n\n  const startRouletto = () => {\n    setRoulettoDisplay(true);\n    handleSpinClick();\n  };\n\n  const handleUserNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setUserName(event.target.value);\n  };\n\n  const handlePersonAddEvent = () => {\n    if (userName) {\n      setPersonList([...personList, userName]);\n      setUserName(\"\");\n    }\n  };\n\n  const handleDeletePerson = (event: string) => {\n    let newPersonList = personList.filter((item: string) => {\n      if (item === event) return null;\n      return item;\n    });\n    setPersonList(newPersonList);\n  };\n\n  const handleSpinClick = () => {\n    let roulettoData = personList.map((userName: string) => {\n      return { option: userName };\n    });\n    setRoulettoData(roulettoData);\n    const newPrizeNumber = Math.floor(Math.random() * roulettoData.length);\n    setPrizeNumber(newPrizeNumber);\n    setMustSpin(true);\n  };\n\n  const reset = () => {\n    setRoulettoData([]);\n    setPersonList([]);\n    setRoulettoDisplay(false);\n  };\n\n  const Demo = styled(\"div\")(({ theme }) => ({\n    backgroundColor: theme.palette.background.paper,\n  }));\n\n  return (\n    <React.Fragment>\n      <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\n        候補者を入力してください。\n      </Typography>\n      <Box sx={{ width: \"100%\" }}>\n        <Grid container spacing={2}>\n          <Grid item xs={8} lg={3}>\n            <FormControl fullWidth>\n              <TextField\n                id=\"inputPerson\"\n                label=\"候補者\"\n                variant=\"standard\"\n                value={userName}\n                onChange={handleUserNameChange}\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\" && e.keyCode === 13) {\n                    handlePersonAddEvent();\n                  }\n                }}\n              />\n            </FormControl>\n          </Grid>\n          <Grid item xs={2} lg={2}>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              size=\"large\"\n              edge=\"start\"\n              onClick={handlePersonAddEvent}\n            >\n              <PersonAddAlt1Icon />\n            </IconButton>\n          </Grid>\n        </Grid>\n      </Box>\n      <Typography sx={{ mt: 4, mb: 2 }} variant=\"h6\" component=\"div\">\n        候補者リスト\n      </Typography>\n\n      <Grid xs={12} lg={5} justifyContent=\"center\">\n        <Demo>\n          <List>\n            {personList.map((value) => {\n              return (\n                <ListItem\n                  divider={true}\n                  secondaryAction={\n                    <IconButton\n                      edge=\"end\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeletePerson(value)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  }\n                >\n                  <ListItemText primary={value} />\n                </ListItem>\n              );\n            })}\n          </List>\n        </Demo>\n      </Grid>\n\n      <>\n        {isRoulettoDisplayed ? (\n          <Grid container justifyContent=\"center\">\n            <Wheel\n              mustStartSpinning={mustSpin}\n              prizeNumber={prizeNumber}\n              data={roulettoData}\n              backgroundColors={backgroundColors}\n              textColors={textColors}\n              fontSize={fontSize}\n              outerBorderColor={outerBorderColor}\n              outerBorderWidth={outerBorderWidth}\n              innerRadius={innerRadius}\n              innerBorderColor={innerBorderColor}\n              innerBorderWidth={innerBorderWidth}\n              radiusLineColor={radiusLineColor}\n              radiusLineWidth={radiusLineWidth}\n              // perpendicularText\n              textDistance={textDistance}\n              onStopSpinning={() => {\n                setMustSpin(false);\n              }}\n            />\n          </Grid>\n        ) : (\n          <p></p>\n        )}\n      </>\n      <Grid container spacing={2}>\n        <Grid item container xs={6} justifyContent=\"flex-end\">\n          <Button variant=\"contained\" onClick={startRouletto}>\n            Go!\n          </Button>\n        </Grid>\n        <Grid item container xs={6} justifyContent=\"flex-start\">\n          <Button variant=\"contained\" onClick={reset}>\n            Reset\n          </Button>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import * as React from \"react\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Container from \"@mui/material/Container\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nimport Roulette from \"../components/Roulette\";\nconst theme = createTheme();\n\nexport default function OrderingPage() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar\n        position=\"absolute\"\n        color=\"default\"\n        elevation={0}\n        sx={{\n          position: \"relative\",\n          borderBottom: (t) => `1px solid ${t.palette.divider}`,\n        }}\n      >\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            担当者決めアプリ\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container component=\"main\" maxWidth=\"lg\">\n        <Paper\n          variant=\"outlined\"\n          sx={{ my: { xs: 3, md: 6 }, p: { xs: 2, md: 3 } }}\n        >\n          <Roulette />\n        </Paper>\n      </Container>\n    </ThemeProvider>\n  );\n}\n","import React from \"react\";\nimport OrderingPage from \"./pages/Ordering\";\n// import './App.css';\n\nfunction App() {\n  return <OrderingPage />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}